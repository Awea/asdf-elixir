#!/usr/bin/env bash

install_elixir() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$TMPDIR" = "" ]; then
    local tmp_download_dir=$(mktemp -d -t elixir_build_XXXXXX)
  else
    local tmp_download_dir=$TMPDIR
  fi

  # running install commands in a subshell
  # we don't want to disturb current working dir
  if [ "$install_type" = "version" ]; then
    (install_elixir_version $version $install_path $tmp_download_dir)
  else
    (install_elixir_ref $version $install_path $tmp_download_dir)
  fi

  mkdir -p $install_path/.mix/archives
}


install_elixir_version() {
  local version=$1
  local install_path=$2
  local tmp_download_dir=$3

  # path to the tar file
  local source_path=$(get_download_file_path_for_version $version $tmp_download_dir)
  download_source_file_for_version $version $source_path

  echo "==> Copying release into place"

  if ! type "unzip" &> /dev/null; then
    echo "ERROR: unzip not found"
    exit 1
  fi

  unzip -q $source_path -d $install_path || exit 1
}


install_elixir_ref() {
  local ref=$1
  local install_path=$2
  local tmp_download_dir=$3

  # path to the tar file
  local source_path=$(get_download_file_path_for_ref $ref $tmp_download_dir)
  download_source_file_for_ref $ref $source_path

  echo "==> Making the release"

  tar zxf $source_path -C $install_path --strip-components=1 || exit 1
  cd $install_path
  make clean test

  if [ $? -ne 0 ]; then
    rm -rf $install_path
    exit 1
  fi
}


download_source_file_for_version() {
  local version=$1
  local download_path=$2
  local download_url=$(get_download_url_for_version $version)

  # determine if the file exists
  echo "==> Checking whether specified Elixir release exists..."
  http_status=$(curl -I -w %{http_code} -s -o /dev/null $download_url)

  if [ $http_status -eq 404 ]; then
    echo -e """==> Elixir version not found.

Hex.pm returned a 404 for the following URL:

${download_url}

You can view a list of all Elixir releases by running 'asdf list-all elixir'.

Note: If you want to download a specific release of Elixir, please
specify the full version number (e.g. 1.2.1 instead of 1.3)."""

    exit 1 # non zero due to file not existing
  fi

  echo -e """==> Downloading ${version} to ${source_path}"""
  curl -Lo $download_path -C - $download_url
}


download_source_file_for_ref() {
  local ref=$1
  local download_path=$2
  local download_url=$(get_download_url_for_ref $ref)

  # determine if the file exists
  echo "==> Checking whether specified Elixir reference exists..."
  http_status=$(curl -I -w %{http_code} -s -o /dev/null $download_url)

  if [ $http_status -eq 404 ]; then
    echo -e """==> Elixir reference not found.

GitHub returned a 404 for the following URL:

${download_url}

You can view a list of all Elixir releases by running 'asdf list-all elixir'
or by visiting https://github.com/elixir-lang/elixir/releases

Note: If you want to specify a git reference by which to install
Elixir, it must be a valid git tag or branch (generally of the form v1.2.1)."""

    exit 1 # non zero due to file not existing
  fi

  echo -e """==> Downloading ${ref} to ${source_path}"""
  curl -Lo $download_path -C - $download_url
}


get_download_file_path_for_version() {
  local version=$1
  local tmp_download_dir=$2
  local pkg_name="elixir-precompiled-${version}.zip"

  echo "$tmp_download_dir/$pkg_name"
}


get_download_file_path_for_ref() {
  local ref=$1
  local tmp_download_dir=$2
  local pkg_name="elixir-ref-${ref}-src.tar.gz"

  echo "$tmp_download_dir/$pkg_name"
}


get_download_url_for_version() {
  local version=$1

  if [[ "$version" =~ ^[0-9]+\.* ]] ; then
     # if version is a release number, prepend v
     echo "https://repo.hex.pm/builds/elixir/v${version}.zip"
  else
     # otherwise it can be a branch name or commit sha
     echo "https://repo.hex.pm/builds/elixir/${version}.zip"
  fi
}


get_download_url_for_ref() {
  local ref=$1

  echo "https://github.com/elixir-lang/elixir/archive/${ref}.tar.gz"
}


install_elixir $ASDF_INSTALL_TYPE $ASDF_INSTALL_VERSION $ASDF_INSTALL_PATH
